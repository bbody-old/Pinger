#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.5 on Thu Mar 07 18:14:16 2013

import wx
import time
from HostManager import HostManager
import threading
from XMLManager import XMLManager
from ultravnc import UltraVNC
import sys
# begin wxGlade: extracode
# end wxGlade

ID_ADD = 1
ID_REMOVE = 2

ICON = "pinger.ico"

#WAIT_TIME = 

class gui(wx.Frame):
    def __init__(self, *args, **kwds):
        self.ultravnc = UltraVNC()
        # begin wxGlade: Pinger.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.hostsList = wx.ListBox(self, -1, choices=[])
        self.Bind(wx.EVT_LISTBOX_DCLICK, self.doubleclick, self.hostsList)


        self.setupIcon()
        
        self.__set_properties()
        self.__do_layout()
        self.Bind(wx.EVT_CLOSE, self.onClose)
        self.status = []
        
        self.xmlManager = XMLManager()
        if (self.xmlManager.isValidXML() == False):
            wx.MessageBox("Host file is invalid, exiting.", "Exiting", wx.OK)
            finish()
        hostList = self.xmlManager.getHostList()
        self.hm = HostManager(hostList)
        
        self.Center()
        # end wxGlade
        self.mutex = threading.Condition()
        self.updateList()
        self.stop_event = threading.Event()
        self.thread = threading.Thread(target=self.thread, args=[])
        self.thread.start()
    def doubleclick(self,event):
        
        index = event.GetSelection()
        #if (self.hm.checkPortUp(index)):
        self.ultravnc.connect(self.hm.getHostname(index))
    def setupIcon(self):
        # Load icon
        image = wx.Image(ICON, wx.BITMAP_TYPE_ICO).ConvertToBitmap()

        # Set up icon
        icon = wx.EmptyIcon()
        icon.CopyFromBitmap(image)

        # Copy icon to current app
        loc = wx.IconLocation(ICON, 0)
        self.SetIcon(wx.IconFromLocation(loc))
        
    def onClose(self, event):
        # Close second thread
        self.stop_event.set()
        # Write hosts to file
        self.xmlManager.writeHostList(self.hm.getHosts())
        # Destroy window
        self.Destroy()
        sys.exit(0)
        exit(0)
        
    def thread(self):
        while (self.stop_event.is_set()):
            self.mutex.acquire()
            try:
                self.updateList()
            finally:
                self.mutex.release()
            
    def updatingThread(self):
        for index in range(self.hm.getSize()):
            self.mutex.acquire()
            try:
                self.updateListItem(index)
            finally:
                self.mutex.release()

    def startLoading(self):
        # Make cursor busy
        wx.BeginBusyCursor()
        
    def stopLoading(self):
        # Stop cursor being busy
        wx.EndBusyCursor()
        
    def updateListItem(self, index):
        if (index < self.hm.getSize()):
            self.mutex.acquire()
            status = self.hm.checkHostUp(index)
            vncstatus = self.hm.checkPortUp(index)
            result = self.hm.getName(index)
            
            if (status == True):
                result += " [Online]"
                if (vncstatus == True):
                    result += " [Port Open]"
                else:
                    result += " [Port Closed]"
            else:
                result += " [Offline]"
                  
            self.hostsList.SetString(index, result)
            self.mutex.notify()
            self.mutex.release()
            
    def updateList(self):
        self.hostsList.Clear()
        self.mutex.acquire()
        for i in range(0, self.hm.getSize()):
            
            result = self.hm.getName(i)
            status = self.hm.checkHostUp(i)
            vncstatus = self.hm.checkPortUp(i)
            
            if (status == True):
                result += " [Online]"
                if (vncstatus == True):
                    result += " [Port Open]"
                else:
                    result += " [Port Closed]"
            else:
                result += " [Offline]"
                
            
            self.hostsList.Append(result)

        self.mutex.notify()
        self.mutex.release()
        
    def addItem(self, event):
        self.startLoading()
        address = self.text_ctrl_1.GetValue()
        if (len(address) > 0):
            if (self.hm.hasHost(address) == False):
                self.hm.addHost(address)
                self.updateList()
            else:
                wx.MessageBox("Already in list", "Warning", wx.OK)
            self.text_ctrl_1.SetValue("")
        self.stopLoading()
        
    def removeItem(self, event):
        # Start loading
        self.startLoading()

        # Get currently selected items in the list
        selections = self.hostsList.GetSelections()

        # Check more than zero items are selected
        if (len(selections)>0):
            # Remove currently selected
            self.hm.removeHost(selections[0])
            # Update list
            self.updateList()
            
        # Stop loading
        self.stopLoading()
        
    def __set_properties(self):
        # begin wxGlade: Pinger.__set_properties
        self.SetTitle("Pinger")
        self.SetSize((300, 400))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Pinger.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.hostsList, 1, wx.EXPAND | wx.ALIGN_RIGHT | wx.ALIGN_LEFT | wx.ALIGN_TOP | wx.ALIGN_BOTTOM, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

